기초
[] : [] 빼고 안에내용 입력
로컬 : 컴퓨터 저장소
원격저장소 : github 저장소
원격저장소 별명 : 보통 origin 으로 정함
──────────────────────────────────────────────
Git
git init : 깃 로컬 저장소 생성 -> 내 작업공간에서 버전 관리를 위한 환경 구성됨을 의미 .git 숨겨진 폴더 생성
git status : 현재 작업공간에서의 변경사항이 있는지 현재 상태를 알려줌
git add [파일이름] : 변경된 파일을 인덱스에 추가함(stage상태로 만듦 : 스테이지 목록에 추가)
git add * : 현재 작업공간의 모든 파일의 변경사항을 추가
주의! : git add를 통해 변경사항을 추가 했지만 코드는 수정가능 따라서 변경사항을 확정하기 위한 commit을 사용
──────────────────────────────────────────────
Commit
git commit : 실행하면 vim 에디터로 넘어가면서 commit의 메세지를 작성하라고 한다
                  i를 누르면 입력모드가 되며 메세지를 작성한후 ESC를 누르고 :wq를 입력하면 
                  w -write, q -quit 저장할 수 있다.
git commit -m "message" : -m 옵션을 통해 메세지를 바로 입력 할 수 있다
──────────────────────────────────────────────
Branch
Branch
    가지를 치는 것과 같다. 처음 git을 초기화 하면 master 브랜치가 생성
    브랜치는 새로운 기능을 구현하기 위해 현재 코드 상태에서 새로운 가지로 뻗어나가
    기능을 구현한 후 완료되면 기존의 가지(master 또는 다른 branch)에 병합 할 수 있다
           common base   master tip        new merge commit
           ↓                   ↓                   ↓
master  ㅇ ─┬─ ㅇ ─ ㅇ ────┬─ ㅇ
two             └─ ㅇ ─ ㅇ ─ ㅇ ─┘
                                        ↑
                                        feature tip

git branch [브랜치 명] : 브랜치 생성
git branch -a 또는 git branch --list : 브랜치 (-a : 모든) 목록 확인
git checkout [브랜치 명] : [브랜치 명] 브랜치로 작업환경 변경
──────────────────────────────────────────────
Merge
git merge [브랜치 명] : 현재 브랜치에서 [브랜치 명]의 변경사항을 병합
                              주의! : 현재 브랜치에서 변경한다는 점 확인
                                       master 브랜치에서 git merge two를 하는 것과
                                       two 브랜치에서 git merge master를 하는 것을 전혀 다르다
예상안
master 브랜치에서 git merge two를 하는 것
master  ㅇ ─┬─ ㅇ ─ ㅇ ────┬─ ㅇ ────
two             └─ ㅇ ─ ㅇ ─ ㅇ ─┘

two 브랜치에서 git merge master를 하는 것
master  ㅇ ─┬─ ㅇ ─ ㅇ ─────┐
two             └─ ㅇ ─ ㅇ ─ ㅇ ──┴─ ㅇ ───
──────────────────────────────────────────────
Merge 충돌 관리
    여러명이 같은 기능을 수정하거나 하면 충돌이 쉽게 발생한다
    즉, 두 명이서 같은 파일에서 작업하면 기존의 내용이 서로 다를 수 있으며
    git은 어떤 코드를 반영해야할지 모르게 됨
    충돌 나는 상황 
    1. two 브랜치에 주석을 작성하고 master 브랜치에 다른 내용의 주석을 작성하고 
    2. 서로 commit을 완료한 상황에서 
    3. master 브랜치에서 python 브랜치를 병합해보자
    4. Automatic merge failed; fix conflicts and then commit the result 라고 뜨면서 충돌을 알린다
       동시에 브랜치 표시가 master에서 master|MERGING라고 변경된다
    master|MERGING은 충돌을 해결하기 위한 임의의 브랜치다 사용자는 충돌이 발생한 코드를 확인해
    변경후 commit을 하면 충돌을 해결 할 수 있다

git diff : 어디서 충돌이 발생하였는지 어떤 변경이 있었는지 추적할 수 있음
           병합 전 어떻게 바뀌었는지 확인 가능
           아무 옵션이 없으면 워킹 디렉터리에 Unstaged 된 파일을 비교
                Unstaged 된 파일이란 간단하게 커밋 되어잇지 않은 파일 즉 파일에 변화가 있다는 뜻
git diff --staged : Staging area에 있는 것을 비교
git diff --cahched : Staging area에 있는 것을 비교
git diff [branch 명] [다른 branch 명] : Branch 간 비교 방법
git diff [branch 명] origin/[branch 명] : 비교 대상이 로컬 브랜치와 리모트 브랜치간 비교
git diff [commit] [commit] : commit 간 비교 방법
git diff [commit]...[commit] : commit 사이를 비교 하고 싶을 때
git diff --color-words : 단어(공백을 구분자)로 표시 된다
git diff --word-diff : 단어를 좀 더 명시적으로 표시 한다

.git/config 파일 변경 사항
[pager]
    diff = diff-highlight | less
이는 git config --global pager.diff 'diff-highlight | less 명령어로 설정에 추가하는 것과 동일하다
 ㄴ 명령어에서도 실행할 수 있다는 뜻

명령어 입력시
diff --git a/ㅁㅁㅁ.ㅁㅁㅁ b/ㅁㅁㅁ.ㅁㅁㅁ : a(이전 버전) b(현재 버전)의 파일을 비교한다는 의미 
index a054843..a5ae4eg 105515
--- a/ㅁㅁㅁ.ㅁㅁㅁ         : --- 이전버전을 의미
+++ b/ㅁㅁㅁ.ㅁㅁㅁ      : +++ 현재버전의 의미
@@ -1,2, -1,2 +1,6 @@  : -는 이전 버전, +는 현재 버전 뒤에 숫자는 라인
                                 : 이전 버전의 두번째 라인과 현재버전의 6번째 라인까지 비교
<<<<<<HEAD : 현재 브랜치의 표시
 [HEAD]의 코드
=========== : 현재 브랜치와 병합 브랜치의 구분선
 [병합 할 브랜치]의 코드
>>>>>>[브랜치 명] : 

변경 사항을 반영하면 master|MERGING에서 master 브랜치로 돌아온다

──────────────────────────────────────────────
원격 저장소 연결 (git remote)

git remote add [원격저장소 별명] [원격저장소 주소] : 원격 저장소 추가
gir remote -v : 원격저장소 목록 확인

추가한 원격 저장소를 통해 로컬 환경의 작업내역을 원격으로 전송할 수 있다

──────────────────────────────────────────────
git push (로컬 -> 원격)

git push [원격저장소 별명] [브랜치 명] : 원격저장소에 [브랜치 명]의 작업내용을 전달
git push origin --all : 모든 브랜치를 전송 가능

──────────────────────────────────────────────
원격저장소와 로컬저장소 충돌 문제 (git pull & fetch)
원격 저장소의 작업 내역이 나의 로컬의 작업내역과 다를 때는 내 변경사항을 업로드(push) 하면  충돌이 발생한다
이럴 때는 원격 저장소의 변경 사항과 나의 로컬저장소의 간격을 없애야 한다.
즉, 원격저장소의 최신 변경사항으로 맞추어야 내 로컬 변경사항을 업로드 할 수 있다
이를 위한 명령어가 fetch와 pull이다

get fetch : 원격 저장소의 변경사항(commit) 들을 로컬저장소로 가져온다. (commit 내역을 가져온다)
get pull : 원격 저장소의 변경사항을 가져와 로컬에 병합한다
             즉, git pull은 git fetch 하고 git merge까지 해준다

상황 부여
    1. 원격 저장소에서 아무 코드나 한개 수정을 하고 commit을 해서 변경을 완료한다 
       ㄴ 원격 저장소에서는 commi이 하나 더 생긴다
    2. 로컬 저장소에서 아무 코드나 한개 수정을 하고 commit을 해서 push를 하면 충돌이 생긴다
        ㄴ 원격 저장소와 로컬 저장소가 변경 내역이 다르기 때문
            (원격과 로컬 각각 커밋이 하나씩 더 있다
            아마 내용이 같아도 안의 index는 서로 다르기 때문에 내용이 같아도 오류가 생길것이다)
상황 해결법
    1. git에서는 git pull을 사용하라고 알려주지만 git fetch를 사용한다
    2. git fetch를 하면 아무 변화가 없어 보이지만 git branch -a를 해보면 
       원격저장소의 임의의 브랜치(origin/master)가 생성된다
    3. git merge origin/master를 통해 원격저장소의 변경내역과 병합 해보자.
       변경 내역에 충돌이 없다면 바로 병합이 되지만
       변경한 내역에 충돌되는 부분이 있으면 git diff를 통해 확인하고 해결하자
    4. 충돌을 해결한후 원격저장소에 push하면 이제는 원격 저장소와 로컬 저장소가 같은 최신의 작업
       내역을 갖고 있기 떄문에 push시 에러가 발생하지 않는다

──────────────────────────────────────────────
fork/clone 와 pull request

fork : 다른 사용자의 원격 저장소를 내 원격 저장소에 복제
         ㄴ 깃허브 홈페이지에서 다른 사용자 저장소에 가서 fork 버튼 누르면 
             다른 사용자 원격 저장소를 내 원격 저장소에 복사가 된다
git clone [저장소주소] [로컬에 복제할 위치(생략가능)] : 원격 저장소를 로컬 저장소에 복제
pull request : 저장소 간의 병합 요청
                   ㄴ 복사한   다른 사용자의 저장소에서 여러 기능 수정 및 추가를 한 후
                       나의 변경 내역을 저장소 소유자에 병합 요청을 하는 기능
                       다른 사람의 소스를 내가 수정하고 변경 요청을 통해 기여 할 수 있다
                   ㄴ 사용법 보류

──────────────────────────────────────────────
























